import React, { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import styles from '../styles/cards.module.css';
import { useDispatch } from 'react-redux';
import {
    getClientCards,
    createClientCard,
    deactivateClientCard,
    deleteClientCard,
    depositToCard,
    withdrawFromCard,
    transferBetweenCards
} from '../api/cards';
import { setCards, addCard, updateCard, removeCard } from '../features/cards/cardSlice';

const Cards = () => {
    const [selectedAccount, setSelectedAccount] = useState(null);
    const [showCreateCardModal, setShowCreateCardModal] = useState(false);
    const [showTransactionModal, setShowTransactionModal] = useState(false);
    const [showTransferModal, setShowTransferModal] = useState(false);
    const [transactionType, setTransactionType] = useState('deposit');
    const [selectedCard, setSelectedCard] = useState(null);
    const [amount, setAmount] = useState('');
    const [toCardNumber, setToCardNumber] = useState('');
    const [newCardData, setNewCardData] = useState({
        account_id: '',
        card_type: 'DEBIT'
    });
    const [activeMenu, setActiveMenu] = useState(null);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redux store
    const cards = useSelector(state => state.cards?.list || []);
    const accounts = useSelector(state => state.accounts?.list || []);
    const user = useSelector(state => state.auth);

    const dispatch = useDispatch();

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç –ø–æ —Å—á–µ—Ç–∞–º —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    const cardsByAccount = (cards || []).reduce((acc, card) => {
        if (!card) return acc;

        const accountId = card.account_id;
        if (!acc[accountId]) {
            const account = accounts.find(acc => acc?.id === accountId);
            acc[accountId] = {
                account: account || null,
                cards: []
            };
        }
        acc[accountId].cards.push(card);
        return acc;
    }, {});

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ store)
    useEffect(() => {
        if (!cards || cards.length === 0) {
            loadCards();
        }
    }, []);

    const loadCards = async () => {
        const res = await getClientCards();
        if (res.data) {
            dispatch(setCards(res.data));
        }
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    const formatCardNumber = (number) => {
        if (!number) return '';
        return number.replace(/(\d{4})/g, '$1 ').trim();
    };

    // –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    const maskCardNumber = (number) => {
        if (!number) return '‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢';
        return '‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ' + number.slice(-4);
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    const formatDate = (dateString) => {
        if (!dateString) return '';
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            month: '2-digit',
            year: '2-digit'
        });
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫–∞—Ä—Ç—ã –ø–æ —Ç–∏–ø—É
    const getCardColor = (cardType) => {
        return cardType === 'CREDIT'
            ? 'linear-gradient(135deg, #3b82f6, #1d4ed8)'
            : 'linear-gradient(135deg, #10b981, #059669)';
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∫–∞—Ä—Ç—ã –ø–æ —Ç–∏–ø—É
    const getCardIcon = (cardType) => {
        return cardType === 'CREDIT' ? 'üí≥' : 'üíµ';
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    const handleCreateCard = async () => {
        if (!newCardData.account_id) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã');
            return;
        }

        const res = await createClientCard(newCardData);
        if (res.data) {
            dispatch(addCard(res.data));
            setShowCreateCardModal(false);
            setNewCardData({ account_id: '', card_type: 'DEBIT' });
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        } else {
            alert(res.error);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
    const handleDeactivateCard = async (cardId) => {
        const res = await deactivateClientCard(cardId);
        if (res.data) {
            dispatch(updateCard(res.data));
            setActiveMenu(null);
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        } else {
            alert(res.error);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
    const handleDeleteCard = async (cardId) => {
        const res = await deleteClientCard(cardId);
        if (res.data) {
            dispatch(removeCard(cardId));
            setActiveMenu(null);
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        } else {
            alert(res.error);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/—Å–Ω—è—Ç–∏–µ)
    const handleTransaction = async () => {
        if (!amount || amount <= 0) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            return;
        }

        if (!selectedCard) {
            alert('–ö–∞—Ä—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
            return;
        }

        const res = transactionType === 'deposit'
            ? await depositToCard(selectedCard.id, parseFloat(amount))
            : await withdrawFromCard(selectedCard.id, parseFloat(amount));

        if (res.data) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
            setShowTransactionModal(false);
            setAmount('');
            setSelectedCard(null);
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        } else {
            alert(res.error);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
    const handleTransfer = async () => {
        if (!amount || amount <= 0 || !toCardNumber) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            return;
        }

        if (!selectedCard) {
            alert('–ö–∞—Ä—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
            return;
        }

        const res = await transferBetweenCards(
            selectedCard.id,
            toCardNumber.replace(/\s/g, ''),
            parseFloat(amount)
        );

        if (res.data) {
            setShowTransferModal(false);
            setAmount('');
            setToCardNumber('');
            setSelectedCard(null);
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        } else {
            alert(res.error);
        }
    };

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const openTransactionModal = (card, type) => {
        setSelectedCard(card);
        setTransactionType(type);
        setShowTransactionModal(true);
        setActiveMenu(null);
    };

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    const openTransferModal = (card) => {
        setSelectedCard(card);
        setShowTransferModal(true);
        setActiveMenu(null);
    };

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    useEffect(() => {
        const handleClickOutside = () => {
            setActiveMenu(null);
        };

        document.addEventListener('click', handleClickOutside);
        return () => {
            document.removeEventListener('click', handleClickOutside);
        };
    }, []);

    const hasCards = cards && cards.length > 0;
    const accountGroups = Object.entries(cardsByAccount);

    return (
        <div className={styles.cardsContainer}>
            {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
            <div className={styles.background}>
                <div className={styles.gradientBlob}></div>
                <div className={styles.gradientBlob}></div>
            </div>

            <div className={styles.cardsContent}>
                {/* –•–µ–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
                <header className={styles.pageHeader}>
                    <div className={styles.headerMain}>
                        <div className={styles.titleSection}>
                            <h1 className={styles.pageTitle}>
                                <span className={styles.titleIcon}>üí≥</span>
                                –ú–æ–∏ –∫–∞—Ä—Ç—ã
                            </h1>
                            <p className={styles.pageSubtitle}>
                                –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏
                            </p>
                        </div>
                        <button
                            className={styles.createCardButton}
                            onClick={() => setShowCreateCardModal(true)}
                        >
                            <span className={styles.plusIcon}>+</span>
                            –í—ã–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
                        </button>
                    </div>
                </header>

                {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
                <main className={styles.cardsMain}>
                    {!hasCards ? (
                        <div className={styles.emptyState}>
                            <div className={styles.emptyIcon}>üí≥</div>
                            <h3 className={styles.emptyTitle}>–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç</h3>
                            <p className={styles.emptyDescription}>
                                –í—ã–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è —É–¥–æ–±–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                            </p>
                            <button
                                className={styles.createCardButton}
                                onClick={() => setShowCreateCardModal(true)}
                            >
                                <span className={styles.plusIcon}>+</span>
                                –í—ã–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É
                            </button>
                        </div>
                    ) : (
                        <div className={styles.accountsList}>
                            {accountGroups.map(([accountId, { account, cards: accountCards }]) => (
                                <div key={accountId} className={styles.accountGroup}>
                                    <div className={styles.accountHeader}>
                                        <div className={styles.accountInfo}>
                                            <h3 className={styles.accountName}>
                                                –°—á–µ—Ç ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ {account?.account_number?.slice(-4) || '‚Ä¢‚Ä¢‚Ä¢‚Ä¢'}
                                            </h3>
                                            <span className={styles.accountBalance}>
                                                {account?.balance?.toLocaleString('ru-RU') || '0'} ‚ÇΩ
                                            </span>
                                        </div>
                                    </div>

                                    <div className={styles.cardsGrid}>
                                        {accountCards.map((card) => (
                                            <div key={card.id} className={styles.cardItem}>
                                                <div
                                                    className={styles.cardVisual}
                                                    style={{ background: getCardColor(card.card_type) }}
                                                >
                                                    <div className={styles.cardHeader}>
                                                        <span className={styles.cardType}>
                                                            {card.card_type === 'CREDIT' ? 'CREDIT' : 'DEBIT'}
                                                        </span>
                                                        <span className={styles.cardIcon}>
                                                            {getCardIcon(card.card_type)}
                                                        </span>
                                                    </div>
                                                    <div className={styles.cardNumber}>
                                                        {maskCardNumber(card.card_number)}
                                                    </div>
                                                    <div className={styles.cardFooter}>
                                                        <div className={styles.cardInfo}>
                                                            <span className={styles.cardHolder}>
                                                                {user?.name?.toUpperCase() || 'CARDHOLDER'}
                                                            </span>
                                                            <span className={styles.cardExpiry}>
                                                                {formatDate(card.expiration_date)}
                                                            </span>
                                                        </div>
                                                        <div className={styles.cardStatus}>
                                                            <span className={`${styles.statusBadge} ${card.is_active ? styles.statusActive : styles.statusInactive
                                                                }`}>
                                                                {card.is_active ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
                                                            </span>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div className={styles.cardActions}>
                                                    <button
                                                        className={styles.actionButton}
                                                        onClick={() => openTransactionModal(card, 'deposit')}
                                                        disabled={!card.is_active}
                                                    >
                                                        <span className={styles.actionIcon}>üí∞</span>
                                                        –ü–æ–ø–æ–ª–Ω–∏—Ç—å
                                                    </button>
                                                    <button
                                                        className={styles.actionButton}
                                                        onClick={() => openTransactionModal(card, 'withdraw')}
                                                        disabled={!card.is_active}
                                                    >
                                                        <span className={styles.actionIcon}>üí∏</span>
                                                        –°–Ω—è—Ç—å
                                                    </button>
                                                    <div className={styles.menuContainer}>
                                                        <button
                                                            className={styles.menuButton}
                                                            onClick={(e) => {
                                                                e.stopPropagation();
                                                                setActiveMenu(activeMenu === card.id ? null : card.id);
                                                            }}
                                                        >
                                                            ‚ãÆ
                                                        </button>
                                                        {activeMenu === card.id && (
                                                            <div className={styles.dropdownMenu}>
                                                                <button
                                                                    className={styles.menuItem}
                                                                    onClick={() => handleDeactivateCard(card.id)}
                                                                    disabled={!card.is_active}
                                                                >
                                                                    üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                                                                </button>
                                                                <button
                                                                    className={`${styles.menuItem} ${styles.danger}`}
                                                                    onClick={() => handleDeleteCard(card.id)}
                                                                >
                                                                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                                                </button>
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}

                    {/* –ë–ª–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏ */}
                    {hasCards && cards.length > 1 && (
                        <div className={styles.transferSection}>
                            <div className={styles.transferCard}>
                                <h3 className={styles.transferTitle}>
                                    <span className={styles.transferIcon}>üîÅ</span>
                                    –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
                                </h3>
                                <p className={styles.transferDescription}>
                                    –ë—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –º–µ–∂–¥—É –≤–∞—à–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏
                                </p>
                                <button
                                    className={styles.transferButton}
                                    onClick={() => setShowTransferModal(true)}
                                >
                                    –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥
                                </button>
                            </div>
                        </div>
                    )}
                </main>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã */}
            {showCreateCardModal && (
                <div className={styles.modalOverlay}>
                    <div className={styles.modalContent}>
                        <div className={styles.modalHeader}>
                            <h2 className={styles.modalTitle}>
                                <span className={styles.modalIcon}>üí≥</span>
                                –í—ã–ø—É—Å–∫ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
                            </h2>
                            <button
                                className={styles.modalClose}
                                onClick={() => setShowCreateCardModal(false)}
                            >
                                ‚úï
                            </button>
                        </div>
                        <div className={styles.modalBody}>
                            <div className={styles.formGroup}>
                                <label className={styles.formLabel}>–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç</label>
                                <select
                                    className={styles.formSelect}
                                    value={newCardData.account_id}
                                    onChange={(e) => setNewCardData({ ...newCardData, account_id: e.target.value })}
                                >
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç</option>
                                    {accounts.map(account => (
                                        <option key={account.id} value={account.id}>
                                            –°—á–µ—Ç ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ {account.account_number?.slice(-4)}
                                            ({account.balance?.toLocaleString('ru-RU')} ‚ÇΩ)
                                        </option>
                                    ))}
                                </select>
                            </div>
                            <div className={styles.formGroup}>
                                <label className={styles.formLabel}>–¢–∏–ø –∫–∞—Ä—Ç—ã</label>
                                <div className={styles.cardTypeOptions}>
                                    <label className={styles.radioOption}>
                                        <input
                                            type="radio"
                                            value="DEBIT"
                                            checked={newCardData.card_type === 'DEBIT'}
                                            onChange={(e) => setNewCardData({ ...newCardData, card_type: e.target.value })}
                                        />
                                        <span className={styles.radioLabel}>
                                            <span className={styles.radioIcon}>üíµ</span>
                                            –î–µ–±–µ—Ç–æ–≤–∞—è
                                        </span>
                                    </label>
                                    <label className={styles.radioOption}>
                                        <input
                                            type="radio"
                                            value="CREDIT"
                                            checked={newCardData.card_type === 'CREDIT'}
                                            onChange={(e) => setNewCardData({ ...newCardData, card_type: e.target.value })}
                                        />
                                        <span className={styles.radioLabel}>
                                            <span className={styles.radioIcon}>üí≥</span>
                                            –ö—Ä–µ–¥–∏—Ç–Ω–∞—è
                                        </span>
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div className={styles.modalFooter}>
                            <button
                                className={styles.cancelButton}
                                onClick={() => setShowCreateCardModal(false)}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button
                                className={styles.confirmButton}
                                onClick={handleCreateCard}
                            >
                                –í—ã–ø—É—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç—É
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è */}
            {showTransactionModal && selectedCard && (
                <div className={styles.modalOverlay}>
                    <div className={styles.modalContent}>
                        <div className={styles.modalHeader}>
                            <h2 className={styles.modalTitle}>
                                <span className={styles.modalIcon}>
                                    {transactionType === 'deposit' ? 'üí∞' : 'üí∏'}
                                </span>
                                {transactionType === 'deposit' ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã' : '–°–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö'}
                            </h2>
                            <button
                                className={styles.modalClose}
                                onClick={() => setShowTransactionModal(false)}
                            >
                                ‚úï
                            </button>
                        </div>
                        <div className={styles.modalBody}>
                            <div className={styles.cardPreview}>
                                <div
                                    className={styles.previewCard}
                                    style={{ background: getCardColor(selectedCard.card_type) }}
                                >
                                    {maskCardNumber(selectedCard.card_number)}
                                </div>
                            </div>
                            <div className={styles.formGroup}>
                                <label className={styles.formLabel}>–°—É–º–º–∞ (‚ÇΩ)</label>
                                <input
                                    type="number"
                                    className={styles.formInput}
                                    value={amount}
                                    onChange={(e) => setAmount(e.target.value)}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                                    min="1"
                                    step="0.01"
                                />
                            </div>
                        </div>
                        <div className={styles.modalFooter}>
                            <button
                                className={styles.cancelButton}
                                onClick={() => setShowTransactionModal(false)}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button
                                className={styles.confirmButton}
                                onClick={handleTransaction}
                            >
                                {transactionType === 'deposit' ? '–ü–æ–ø–æ–ª–Ω–∏—Ç—å' : '–°–Ω—è—Ç—å'}
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∞ */}
            {showTransferModal && selectedCard && (
                <div className={styles.modalOverlay}>
                    <div className={styles.modalContent}>
                        <div className={styles.modalHeader}>
                            <h2 className={styles.modalTitle}>
                                <span className={styles.modalIcon}>üîÅ</span>
                                –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
                            </h2>
                            <button
                                className={styles.modalClose}
                                onClick={() => setShowTransferModal(false)}
                            >
                                ‚úï
                            </button>
                        </div>
                        <div className={styles.modalBody}>
                            <div className={styles.formGroup}>
                                <label className={styles.formLabel}>–° –∫–∞—Ä—Ç—ã</label>
                                <div className={styles.selectedCard}>
                                    {maskCardNumber(selectedCard.card_number)}
                                </div>
                            </div>
                            <div className={styles.formGroup}>
                                <label className={styles.formLabel}>–ù–∞ –∫–∞—Ä—Ç—É</label>
                                <input
                                    type="text"
                                    className={styles.formInput}
                                    value={toCardNumber}
                                    onChange={(e) => setToCardNumber(e.target.value)}
                                    placeholder="0000 0000 0000 0000"
                                    maxLength="19"
                                />
                            </div>
                            <div className={styles.formGroup}>
                                <label className={styles.formLabel}>–°—É–º–º–∞ (‚ÇΩ)</label>
                                <input
                                    type="number"
                                    className={styles.formInput}
                                    value={amount}
                                    onChange={(e) => setAmount(e.target.value)}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                                    min="1"
                                    step="0.01"
                                />
                            </div>
                        </div>
                        <div className={styles.modalFooter}>
                            <button
                                className={styles.cancelButton}
                                onClick={() => setShowTransferModal(false)}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button
                                className={styles.confirmButton}
                                onClick={handleTransfer}
                            >
                                –ü–µ—Ä–µ–≤–µ—Å—Ç–∏
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Cards;