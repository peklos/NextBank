import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import styles from '../styles/transactions.module.css';
import { getMyTransactions, getMyTransactionsStats } from '../api/transactions';
import { setTransactions, setTransactionsStats } from '../features/transactions/transactionsSlice';

const Transactions = () => {
    const [filter, setFilter] = useState('all');
    const [searchQuery, setSearchQuery] = useState('');
    const [notification, setNotification] = useState({ show: false, message: '', type: '' });

    const dispatch = useDispatch();
    const transactions = useSelector(state => state.transactions.list || []);
    const stats = useSelector(state => state.transactions.stats);

    const showNotification = (message, type = 'success') => {
        setNotification({ show: true, message, type });
        setTimeout(() => setNotification({ show: false, message: '', type: '' }), 4000);
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    useEffect(() => {
        const loadData = async () => {
            const transRes = await getMyTransactions({ limit: 100 });
            if (transRes.data) {
                dispatch(setTransactions(transRes.data));
            }

            const statsRes = await getMyTransactionsStats();
            if (statsRes.data) {
                dispatch(setTransactionsStats(statsRes.data));
            }
        };
        loadData();
    }, [dispatch]);

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const filteredTransactions = transactions.filter(t => {
        const matchesFilter = filter === 'all' || t.transaction_type === filter;
        const matchesSearch = searchQuery === '' ||
            t.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||
            t.amount.toString().includes(searchQuery);
        return matchesFilter && matchesSearch;
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    const formatDate = (dateString) => {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const getTransactionIcon = (type) => {
        const icons = {
            deposit: 'üí∞',
            withdraw: 'üí∏',
            transfer: 'üîÅ',
            loan_payment: 'üí≥'
        };
        return icons[type] || 'üìù';
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const getTransactionColor = (type) => {
        const colors = {
            deposit: '#10b981',
            withdraw: '#ef4444',
            transfer: '#3b82f6',
            loan_payment: '#f59e0b'
        };
        return colors[type] || '#94a3b8';
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞
    const getTransactionTypeName = (type) => {
        const names = {
            deposit: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
            withdraw: '–°–Ω—è—Ç–∏–µ',
            transfer: '–ü–µ—Ä–µ–≤–æ–¥',
            loan_payment: '–û–ø–ª–∞—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞'
        };
        return names[type] || type;
    };

    return (
        <div className={styles.transactionsContainer}>
            {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω */}
            <div className={styles.background}>
                <div className={styles.gradientBlob}></div>
                <div className={styles.gradientBlob}></div>
                <div className={styles.gradientBlob}></div>
            </div>

            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */}
            {notification.show && (
                <div className={`${styles.notification} ${styles[notification.type]}`}>
                    {notification.message}
                </div>
            )}

            <div className={styles.transactionsContent}>
                {/* –•–µ–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
                <header className={styles.pageHeader}>
                    <div className={styles.headerMain}>
                        <div className={styles.titleSection}>
                            <h1 className={styles.pageTitle}>
                                <span className={styles.titleIcon}>üìä</span>
                                –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                            </h1>
                            <p className={styles.pageSubtitle}>
                                –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤—Å–µ –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                            </p>
                        </div>
                        {stats && (
                            <div className={styles.headerStats}>
                                <div className={styles.statCard}>
                                    <span className={styles.statLabel}>–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π</span>
                                    <span className={styles.statValue}>{stats.total_transactions}</span>
                                </div>
                                <div className={styles.statCard}>
                                    <span className={styles.statLabel}>–ü–æ–ø–æ–ª–Ω–µ–Ω–æ</span>
                                    <span className={styles.statValue}>
                                        {stats.total_deposits.toLocaleString('ru-RU')} ‚ÇΩ
                                    </span>
                                </div>
                                <div className={styles.statCard}>
                                    <span className={styles.statLabel}>–°–Ω—è—Ç–æ</span>
                                    <span className={styles.statValue}>
                                        {stats.total_withdrawals.toLocaleString('ru-RU')} ‚ÇΩ
                                    </span>
                                </div>
                            </div>
                        )}
                    </div>
                </header>

                {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
                <main className={styles.transactionsMain}>
                    <div className={styles.contentGrid}>
                        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –§–∏–ª—å—Ç—Ä—ã */}
                        <div className={styles.leftColumn}>
                            <div className={styles.filtersCard}>
                                <div className={styles.cardHeader}>
                                    <h2 className={styles.cardTitle}>
                                        <span className={styles.cardIcon}>üîç</span>
                                        –§–∏–ª—å—Ç—Ä—ã
                                    </h2>
                                </div>

                                <div className={styles.filtersList}>
                                    <button
                                        className={`${styles.filterButton} ${filter === 'all' ? styles.filterActive : ''}`}
                                        onClick={() => setFilter('all')}
                                    >
                                        <span className={styles.filterIcon}>üìã</span>
                                        <span className={styles.filterText}>–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</span>
                                        <span className={styles.filterCount}>{transactions.length}</span>
                                    </button>
                                    <button
                                        className={`${styles.filterButton} ${filter === 'deposit' ? styles.filterActive : ''}`}
                                        onClick={() => setFilter('deposit')}
                                    >
                                        <span className={styles.filterIcon}>üí∞</span>
                                        <span className={styles.filterText}>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è</span>
                                        <span className={styles.filterCount}>
                                            {transactions.filter(t => t.transaction_type === 'deposit').length}
                                        </span>
                                    </button>
                                    <button
                                        className={`${styles.filterButton} ${filter === 'withdraw' ? styles.filterActive : ''}`}
                                        onClick={() => setFilter('withdraw')}
                                    >
                                        <span className={styles.filterIcon}>üí∏</span>
                                        <span className={styles.filterText}>–°–Ω—è—Ç–∏—è</span>
                                        <span className={styles.filterCount}>
                                            {transactions.filter(t => t.transaction_type === 'withdraw').length}
                                        </span>
                                    </button>
                                    <button
                                        className={`${styles.filterButton} ${filter === 'transfer' ? styles.filterActive : ''}`}
                                        onClick={() => setFilter('transfer')}
                                    >
                                        <span className={styles.filterIcon}>üîÅ</span>
                                        <span className={styles.filterText}>–ü–µ—Ä–µ–≤–æ–¥—ã</span>
                                        <span className={styles.filterCount}>
                                            {transactions.filter(t => t.transaction_type === 'transfer').length}
                                        </span>
                                    </button>
                                    <button
                                        className={`${styles.filterButton} ${filter === 'loan_payment' ? styles.filterActive : ''}`}
                                        onClick={() => setFilter('loan_payment')}
                                    >
                                        <span className={styles.filterIcon}>üí≥</span>
                                        <span className={styles.filterText}>–ü–ª–∞—Ç–µ–∂–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º</span>
                                        <span className={styles.filterCount}>
                                            {transactions.filter(t => t.transaction_type === 'loan_payment').length}
                                        </span>
                                    </button>
                                </div>
                            </div>
                        </div>

                        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
                        <div className={styles.rightColumn}>
                            <div className={styles.transactionsHeader}>
                                <h2 className={styles.sectionTitle}>
                                    {filter === 'all' ? '–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' : getTransactionTypeName(filter)}
                                    <span className={styles.transactionsCount}>({filteredTransactions.length})</span>
                                </h2>
                                <div className={styles.searchBox}>
                                    <input
                                        type="text"
                                        placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Å—É–º–º–µ..."
                                        className={styles.searchInput}
                                        value={searchQuery}
                                        onChange={(e) => setSearchQuery(e.target.value)}
                                    />
                                    <span className={styles.searchIcon}>üîç</span>
                                </div>
                            </div>

                            {filteredTransactions.length === 0 ? (
                                <div className={styles.emptyState}>
                                    <div className={styles.emptyIcon}>üìä</div>
                                    <h3 className={styles.emptyTitle}>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                                    <p className={styles.emptyDescription}>
                                        {searchQuery ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞' : '–ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
                                    </p>
                                </div>
                            ) : (
                                <div className={styles.transactionsList}>
                                    {filteredTransactions.map((transaction) => (
                                        <div key={transaction.id} className={styles.transactionCard}>
                                            <div
                                                className={styles.transactionIcon}
                                                style={{ backgroundColor: getTransactionColor(transaction.transaction_type) + '20' }}
                                            >
                                                <span style={{ color: getTransactionColor(transaction.transaction_type) }}>
                                                    {getTransactionIcon(transaction.transaction_type)}
                                                </span>
                                            </div>

                                            <div className={styles.transactionInfo}>
                                                <h3 className={styles.transactionTitle}>
                                                    {transaction.description || getTransactionTypeName(transaction.transaction_type)}
                                                </h3>
                                                <span className={styles.transactionDate}>
                                                    {formatDate(transaction.created_at)}
                                                </span>
                                            </div>

                                            <div className={styles.transactionAmount}>
                                                <span
                                                    className={styles.amount}
                                                    style={{ color: getTransactionColor(transaction.transaction_type) }}
                                                >
                                                    {transaction.transaction_type === 'deposit' ? '+' : '-'}
                                                    {transaction.amount.toLocaleString('ru-RU')} ‚ÇΩ
                                                </span>
                                                <span className={`${styles.statusBadge} ${styles.statusCompleted}`}>
                                                    {transaction.status === 'completed' ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : transaction.status}
                                                </span>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                </main>
            </div>
        </div>
    );
};

export default Transactions;