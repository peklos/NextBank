// [file name]: Loans.jsx
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
    applyForLoan,
    getMyLoans,
    getLoanDetails,
    payLoan,
    getLoanSchedule
} from '../api/loans';
import {
    createProcess,
    getMyProcesses,
    getProcessDetails,
    updateProcessStatus,
    deleteProcess,
    getMyProcessesStats
} from '../api/processes';
import {
    setLoans,
    addLoan,
    updateLoan,
    setLoansError,
    setLoansLoading
} from '../features/loans/loansSlice';
import {
    setProcesses,
    addProcess,
    updateProcess,
    setProcessesStats,
    setProcessesError,
    setProcessesLoading
} from '../features/processes/processesSlice';
import styles from '../styles/loans.module.css';

const Loans = () => {
    const dispatch = useDispatch();
    const { list: loans, loading: loansLoading, error: loansError } = useSelector(state => state.loans);
    const { list: processes, stats: processesStats, loading: processesLoading, error: processesError } = useSelector(state => state.processes);

    const [activeTab, setActiveTab] = useState('loans');
    const [showApplyModal, setShowApplyModal] = useState(false);
    const [showProcessModal, setShowProcessModal] = useState(false);
    const [selectedLoan, setSelectedLoan] = useState(null);
    const [selectedProcess, setSelectedProcess] = useState(null);
    const [paymentAmount, setPaymentAmount] = useState('');
    const [schedule, setSchedule] = useState(null);

    const [loanForm, setLoanForm] = useState({
        amount: '',
        term: 12,
        purpose: '',
        description: ''
    });

    const [processForm, setProcessForm] = useState({
        type: '',
        title: '',
        description: '',
        priority: 'medium'
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        loadLoans();
        loadProcesses();
        loadProcessesStats();
    }, []);

    const loadLoans = async () => {
        dispatch(setLoansLoading(true));
        const { data, error } = await getMyLoans();
        if (data) {
            dispatch(setLoans(data));
        } else {
            dispatch(setLoansError(error));
        }
        dispatch(setLoansLoading(false));
    };

    const loadProcesses = async () => {
        dispatch(setProcessesLoading(true));
        const { data, error } = await getMyProcesses();
        if (data) {
            dispatch(setProcesses(data));
        } else {
            dispatch(setProcessesError(error));
        }
        dispatch(setProcessesLoading(false));
    };

    const loadProcessesStats = async () => {
        const { data } = await getMyProcessesStats();
        if (data) {
            dispatch(setProcessesStats(data));
        }
    };

    const handleApplyForLoan = async () => {
        const { data, error } = await applyForLoan(loanForm);
        if (data) {
            dispatch(addLoan(data));
            setShowApplyModal(false);
            setLoanForm({ amount: '', term: 12, purpose: '', description: '' });
        } else {
            dispatch(setLoansError(error));
        }
    };

    const handleCreateProcess = async () => {
        const { data, error } = await createProcess(processForm);
        if (data) {
            dispatch(addProcess(data));
            setShowProcessModal(false);
            setProcessForm({ type: '', title: '', description: '', priority: 'medium' });
        } else {
            dispatch(setProcessesError(error));
        }
    };

    const handlePayLoan = async (loanId) => {
        const { data, error } = await payLoan(loanId, { amount: parseFloat(paymentAmount) });
        if (data) {
            dispatch(updateLoan(data));
            setSelectedLoan(null);
            setPaymentAmount('');
        } else {
            dispatch(setLoansError(error));
        }
    };

    const handleLoadSchedule = async (loanId) => {
        const { data } = await getLoanSchedule(loanId);
        if (data) {
            setSchedule(data);
        }
    };

    const handleUpdateProcessStatus = async (processId, status) => {
        const { data, error } = await updateProcessStatus(processId, { status });
        if (data) {
            dispatch(updateProcess(data));
            setSelectedProcess(null);
        } else {
            dispatch(setProcessesError(error));
        }
    };

    const handleDeleteProcess = async (processId) => {
        const { error } = await deleteProcess(processId);
        if (!error) {
            dispatch(removeProcess(processId));
            setSelectedProcess(null);
        } else {
            dispatch(setProcessesError(error));
        }
    };

    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB'
        }).format(amount);
    };

    const formatDate = (dateString) => {
        return new Date(dateString).toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
    };

    const getLoanStatusColor = (status) => {
        const statusColors = {
            'active': '#10b981',
            'pending': '#f59e0b',
            'rejected': '#ef4444',
            'paid': '#3b82f6',
            'overdue': '#dc2626'
        };
        return statusColors[status] || '#6b7280';
    };

    const getProcessPriorityColor = (priority) => {
        const priorityColors = {
            'low': '#10b981',
            'medium': '#f59e0b',
            'high': '#ef4444',
            'critical': '#dc2626'
        };
        return priorityColors[priority] || '#6b7280';
    };

    const loanPurposes = [
        '–ò–ø–æ—Ç–µ–∫–∞',
        '–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç',
        '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç',
        '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç',
        '–†–µ–º–æ–Ω—Ç',
        '–õ–µ—á–µ–Ω–∏–µ',
        '–û—Ç–¥—ã—Ö',
        '–ë–∏–∑–Ω–µ—Å',
        '–î—Ä—É–≥–æ–µ'
    ];

    const processTypes = [
        '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞',
        '–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—á–µ—Ç–∞',
        '–í—ã–ø—É—Å–∫ –∫–∞—Ä—Ç—ã',
        '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
        '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
        '–î—Ä—É–≥–æ–µ'
    ];

    return (
        <div className={styles.loansContainer}>
            <div className={styles.background}>
                <div className={styles.gradientBlob}></div>
                <div className={styles.gradientBlob}></div>
                <div className={styles.gradientBlob}></div>
            </div>

            <div className={styles.loansContent}>
                <header className={styles.loansHeader}>
                    <div className={styles.headerMain}>
                        <div className={styles.titleSection}>
                            <h1 className={styles.pageTitle}>–ö—Ä–µ–¥–∏—Ç—ã –∏ –ü—Ä–æ—Ü–µ—Å—Å—ã</h1>
                            <p className={styles.pageSubtitle}>
                                –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º–∏ –∫—Ä–µ–¥–∏—Ç–∞–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                            </p>
                        </div>
                        <div className={styles.headerStats}>
                            <div className={styles.statItem}>
                                <span className={styles.statLabel}>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤</span>
                                <span className={styles.statValue}>
                                    {loans.filter(loan => loan.status === 'active').length}
                                </span>
                            </div>
                            <div className={styles.statItem}>
                                <span className={styles.statLabel}>–í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</span>
                                <span className={styles.statValue}>{processes.length}</span>
                            </div>
                            <div className={styles.statItem}>
                                <span className={styles.statLabel}>–û–±—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å</span>
                                <span className={styles.statValue}>
                                    {formatCurrency(loans.reduce((total, loan) => total + (loan.remaining_amount || 0), 0))}
                                </span>
                            </div>
                        </div>
                    </div>
                </header>

                <main className={styles.loansMain}>
                    {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞–±—ã */}
                    <div className={styles.tabsContainer}>
                        <div className={styles.tabs}>
                            <button
                                className={`${styles.tab} ${activeTab === 'loans' ? styles.tabActive : ''}`}
                                onClick={() => setActiveTab('loans')}
                            >
                                <span className={styles.tabIcon}>üí∞</span>
                                –ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã
                            </button>
                            <button
                                className={`${styles.tab} ${activeTab === 'processes' ? styles.tabActive : ''}`}
                                onClick={() => setActiveTab('processes')}
                            >
                                <span className={styles.tabIcon}>üìä</span>
                                –ü—Ä–æ—Ü–µ—Å—Å—ã
                            </button>
                        </div>
                    </div>

                    {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–æ–≤ */}
                    <div className={styles.tabContent}>
                        {activeTab === 'loans' && (
                            <div className={styles.loansSection}>
                                <div className={styles.sectionHeader}>
                                    <h2 className={styles.sectionTitle}>
                                        <span className={styles.sectionIcon}>üí∞</span>
                                        –ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã
                                    </h2>
                                    <button
                                        className={styles.primaryButton}
                                        onClick={() => setShowApplyModal(true)}
                                    >
                                        <span className={styles.buttonIcon}>+</span>
                                        –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
                                    </button>
                                </div>

                                {loansLoading ? (
                                    <div className={styles.loadingState}>
                                        <div className={styles.loadingSpinner}></div>
                                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤...</p>
                                    </div>
                                ) : loansError ? (
                                    <div className={styles.errorState}>
                                        <div className={styles.errorIcon}>‚ö†Ô∏è</div>
                                        <p>{loansError}</p>
                                        <button className={styles.retryButton} onClick={loadLoans}>
                                            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                                        </button>
                                    </div>
                                ) : loans.length === 0 ? (
                                    <div className={styles.emptyState}>
                                        <div className={styles.emptyIcon}>üí∞</div>
                                        <h3 className={styles.emptyTitle}>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤</h3>
                                        <p className={styles.emptyText}>
                                            –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–≤—ã–π –∫—Ä–µ–¥–∏—Ç –∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ –≤—ã–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
                                        </p>
                                        <button
                                            className={styles.emptyActionButton}
                                            onClick={() => setShowApplyModal(true)}
                                        >
                                            –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç
                                        </button>
                                    </div>
                                ) : (
                                    <div className={styles.loansGrid}>
                                        {loans.map(loan => (
                                            <div key={loan.id} className={styles.loanCard}>
                                                <div className={styles.loanHeader}>
                                                    <div className={styles.loanTitle}>
                                                        <h3 className={styles.loanName}>{loan.purpose}</h3>
                                                        <span
                                                            className={styles.loanStatus}
                                                            style={{ backgroundColor: getLoanStatusColor(loan.status) }}
                                                        >
                                                            {loan.status}
                                                        </span>
                                                    </div>
                                                    <div className={styles.loanAmount}>
                                                        {formatCurrency(loan.amount)}
                                                    </div>
                                                </div>

                                                <div className={styles.loanDetails}>
                                                    <div className={styles.detailRow}>
                                                        <span className={styles.detailLabel}>–°—Ä–æ–∫:</span>
                                                        <span className={styles.detailValue}>{loan.term} –º–µ—Å—è—Ü–µ–≤</span>
                                                    </div>
                                                    <div className={styles.detailRow}>
                                                        <span className={styles.detailLabel}>–°—Ç–∞–≤–∫–∞:</span>
                                                        <span className={styles.detailValue}>{loan.interest_rate}%</span>
                                                    </div>
                                                    <div className={styles.detailRow}>
                                                        <span className={styles.detailLabel}>–û—Å—Ç–∞—Ç–æ–∫:</span>
                                                        <span className={styles.detailValue}>
                                                            {formatCurrency(loan.remaining_amount || loan.amount)}
                                                        </span>
                                                    </div>
                                                    <div className={styles.detailRow}>
                                                        <span className={styles.detailLabel}>–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:</span>
                                                        <span className={styles.detailValue}>
                                                            {formatDate(loan.created_at)}
                                                        </span>
                                                    </div>
                                                </div>

                                                <div className={styles.loanActions}>
                                                    {loan.status === 'active' && (
                                                        <button
                                                            className={styles.actionButton}
                                                            onClick={() => setSelectedLoan(loan)}
                                                        >
                                                            üí≥ –û–ø–ª–∞—Ç–∏—Ç—å
                                                        </button>
                                                    )}
                                                    <button
                                                        className={styles.secondaryButton}
                                                        onClick={() => handleLoadSchedule(loan.id)}
                                                    >
                                                        üìÖ –ì—Ä–∞—Ñ–∏–∫
                                                    </button>
                                                    <button
                                                        className={styles.secondaryButton}
                                                        onClick={() => {
                                                            setSelectedLoan(loan);
                                                            handleLoadSchedule(loan.id);
                                                        }}
                                                    >
                                                        üëÅÔ∏è –î–µ—Ç–∞–ª–∏
                                                    </button>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </div>
                        )}

                        {activeTab === 'processes' && (
                            <div className={styles.processesSection}>
                                <div className={styles.sectionHeader}>
                                    <h2 className={styles.sectionTitle}>
                                        <span className={styles.sectionIcon}>üìä</span>
                                        –ú–æ–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
                                    </h2>
                                    <button
                                        className={styles.primaryButton}
                                        onClick={() => setShowProcessModal(true)}
                                    >
                                        <span className={styles.buttonIcon}>+</span>
                                        –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                                    </button>
                                </div>

                                {processesLoading ? (
                                    <div className={styles.loadingState}>
                                        <div className={styles.loadingSpinner}></div>
                                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...</p>
                                    </div>
                                ) : processesError ? (
                                    <div className={styles.errorState}>
                                        <div className={styles.errorIcon}>‚ö†Ô∏è</div>
                                        <p>{processesError}</p>
                                        <button className={styles.retryButton} onClick={loadProcesses}>
                                            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                                        </button>
                                    </div>
                                ) : processes.length === 0 ? (
                                    <div className={styles.emptyState}>
                                        <div className={styles.emptyIcon}>üìä</div>
                                        <h3 className={styles.emptyTitle}>–ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                                        <p className={styles.emptyText}>
                                            –°–æ–∑–¥–∞–π—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –∏ –æ–ø–µ—Ä–∞—Ü–∏–π
                                        </p>
                                        <button
                                            className={styles.emptyActionButton}
                                            onClick={() => setShowProcessModal(true)}
                                        >
                                            –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                                        </button>
                                    </div>
                                ) : (
                                    <div className={styles.processesList}>
                                        {processes.map(process => (
                                            <div key={process.id} className={styles.processCard}>
                                                <div className={styles.processHeader}>
                                                    <div className={styles.processMain}>
                                                        <h3 className={styles.processTitle}>{process.title}</h3>
                                                        <div className={styles.processMeta}>
                                                            <span
                                                                className={styles.processType}
                                                                style={{
                                                                    backgroundColor: getProcessPriorityColor(process.priority)
                                                                }}
                                                            >
                                                                {process.type}
                                                            </span>
                                                            <span
                                                                className={styles.processPriority}
                                                                style={{
                                                                    backgroundColor: getProcessPriorityColor(process.priority)
                                                                }}
                                                            >
                                                                {process.priority}
                                                            </span>
                                                        </div>
                                                    </div>
                                                    <div className={styles.processStatus}>
                                                        {process.status}
                                                    </div>
                                                </div>

                                                {process.description && (
                                                    <p className={styles.processDescription}>
                                                        {process.description}
                                                    </p>
                                                )}

                                                <div className={styles.processDetails}>
                                                    <div className={styles.detailRow}>
                                                        <span className={styles.detailLabel}>–°–æ–∑–¥–∞–Ω:</span>
                                                        <span className={styles.detailValue}>
                                                            {formatDate(process.created_at)}
                                                        </span>
                                                    </div>
                                                    {process.updated_at && (
                                                        <div className={styles.detailRow}>
                                                            <span className={styles.detailLabel}>–û–±–Ω–æ–≤–ª–µ–Ω:</span>
                                                            <span className={styles.detailValue}>
                                                                {formatDate(process.updated_at)}
                                                            </span>
                                                        </div>
                                                    )}
                                                </div>

                                                <div className={styles.processActions}>
                                                    <button
                                                        className={styles.actionButton}
                                                        onClick={() => setSelectedProcess(process)}
                                                    >
                                                        ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                                                    </button>
                                                    <button
                                                        className={styles.secondaryButton}
                                                        onClick={() => handleDeleteProcess(process.id)}
                                                    >
                                                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                                    </button>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                )}

                                {processesStats && (
                                    <div className={styles.statsCard}>
                                        <h3 className={styles.statsTitle}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</h3>
                                        <div className={styles.statsGrid}>
                                            <div className={styles.statItem}>
                                                <span className={styles.statNumber}>
                                                    {processesStats.total || processes.length}
                                                </span>
                                                <span className={styles.statLabel}>–í—Å–µ–≥–æ</span>
                                            </div>
                                            <div className={styles.statItem}>
                                                <span className={styles.statNumber}>
                                                    {processesStats.completed || 0}
                                                </span>
                                                <span className={styles.statLabel}>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                                            </div>
                                            <div className={styles.statItem}>
                                                <span className={styles.statNumber}>
                                                    {processesStats.in_progress || 0}
                                                </span>
                                                <span className={styles.statLabel}>–í —Ä–∞–±–æ—Ç–µ</span>
                                            </div>
                                            <div className={styles.statItem}>
                                                <span className={styles.statNumber}>
                                                    {processStats.pending || 0}
                                                </span>
                                                <span className={styles.statLabel}>–û–∂–∏–¥–∞–Ω–∏–µ</span>
                                            </div>
                                        </div>
                                    </div>
                                )}
                            </div>
                        )}
                    </div>
                </main>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—Ä–µ–¥–∏—Ç */}
            {showApplyModal && (
                <div className={styles.modalOverlay}>
                    <div className={styles.modalContent}>
                        <div className={styles.modalHeader}>
                            <h2 className={styles.modalTitle}>
                                <span className={styles.modalIcon}>üí∞</span>
                                –ó–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç
                            </h2>
                            <button
                                className={styles.modalClose}
                                onClick={() => setShowApplyModal(false)}
                            >
                                ‚úï
                            </button>
                        </div>

                        <div className={styles.modalBody}>
                            <div className={styles.formGrid}>
                                <div className={styles.formGroup}>
                                    <label className={styles.formLabel}>–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞</label>
                                    <input
                                        type="number"
                                        value={loanForm.amount}
                                        onChange={(e) => setLoanForm(prev => ({
                                            ...prev,
                                            amount: e.target.value
                                        }))}
                                        className={styles.formInput}
                                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                                    />
                                </div>

                                <div className={styles.formGroup}>
                                    <label className={styles.formLabel}>–°—Ä–æ–∫ (–º–µ—Å—è—Ü–µ–≤)</label>
                                    <select
                                        value={loanForm.term}
                                        onChange={(e) => setLoanForm(prev => ({
                                            ...prev,
                                            term: parseInt(e.target.value)
                                        }))}
                                        className={styles.formSelect}
                                    >
                                        <option value={6}>6 –º–µ—Å—è—Ü–µ–≤</option>
                                        <option value={12}>12 –º–µ—Å—è—Ü–µ–≤</option>
                                        <option value={24}>24 –º–µ—Å—è—Ü–∞</option>
                                        <option value={36}>36 –º–µ—Å—è—Ü–µ–≤</option>
                                        <option value={60}>60 –º–µ—Å—è—Ü–µ–≤</option>
                                    </select>
                                </div>

                                <div className={styles.formGroup}>
                                    <label className={styles.formLabel}>–¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞</label>
                                    <select
                                        value={loanForm.purpose}
                                        onChange={(e) => setLoanForm(prev => ({
                                            ...prev,
                                            purpose: e.target.value
                                        }))}
                                        className={styles.formSelect}
                                    >
                                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å</option>
                                        {loanPurposes.map(purpose => (
                                            <option key={purpose} value={purpose}>
                                                {purpose}
                                            </option>
                                        ))}
                                    </select>
                                </div>

                                <div className={styles.formGroup}>
                                    <label className={styles.formLabel}>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                                    <textarea
                                        value={loanForm.description}
                                        onChange={(e) => setLoanForm(prev => ({
                                            ...prev,
                                            description: e.target.value
                                        }))}
                                        className={styles.formTextarea}
                                        placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..."
                                        rows="3"
                                    />
                                </div>
                            </div>

                            {loansError && (
                                <div className={styles.errorContainer}>
                                    <p className={styles.errorMessage}>{loansError}</p>
                                </div>
                            )}

                            <div className={styles.modalFooter}>
                                <button
                                    className={styles.cancelButton}
                                    onClick={() => setShowApplyModal(false)}
                                >
                                    –û—Ç–º–µ–Ω–∞
                                </button>
                                <button
                                    className={styles.saveButton}
                                    onClick={handleApplyForLoan}
                                    disabled={!loanForm.amount || !loanForm.purpose}
                                >
                                    –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ */}
            {showProcessModal && (
                <div className={styles.modalOverlay}>
                    <div className={styles.modalContent}>
                        <div className={styles.modalHeader}>
                            <h2 className={styles.modalTitle}>
                                <span className={styles.modalIcon}>üìä</span>
                                –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                            </h2>
                            <button
                                className={styles.modalClose}
                                onClick={() => setShowProcessModal(false)}
                            >
                                ‚úï
                            </button>
                        </div>

                        <div className={styles.modalBody}>
                            <div className={styles.formGrid}>
                                <div className={styles.formGroup}>
                                    <label className={styles.formLabel}>–¢–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞</label>
                                    <select
                                        value={processForm.type}
                                        onChange={(e) => setProcessForm(prev => ({
                                            ...prev,
                                            type: e.target.value
                                        }))}
                                        className={styles.formSelect}
                                    >
                                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                                        {processTypes.map(type => (
                                            <option key={type} value={type}>
                                                {type}
                                            </option>
                                        ))}
                                    </select>
                                </div>

                                <div className={styles.formGroup}>
                                    <label className={styles.formLabel}>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                                    <select
                                        value={processForm.priority}
                                        onChange={(e) => setProcessForm(prev => ({
                                            ...prev,
                                            priority: e.target.value
                                        }))}
                                        className={styles.formSelect}
                                    >
                                        <option value="low">–ù–∏–∑–∫–∏–π</option>
                                        <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                                        <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                                        <option value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
                                    </select>
                                </div>

                                <div className={styles.formGroup}>
                                    <label className={styles.formLabel}>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                                    <input
                                        type="text"
                                        value={processForm.title}
                                        onChange={(e) => setProcessForm(prev => ({
                                            ...prev,
                                            title: e.target.value
                                        }))}
                                        className={styles.formInput}
                                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"
                                    />
                                </div>

                                <div className={styles.formGroup}>
                                    <label className={styles.formLabel}>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                                    <textarea
                                        value={processForm.description}
                                        onChange={(e) => setProcessForm(prev => ({
                                            ...prev,
                                            description: e.target.value
                                        }))}
                                        className={styles.formTextarea}
                                        placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞..."
                                        rows="3"
                                    />
                                </div>
                            </div>

                            {processesError && (
                                <div className={styles.errorContainer}>
                                    <p className={styles.errorMessage}>{processesError}</p>
                                </div>
                            )}

                            <div className={styles.modalFooter}>
                                <button
                                    className={styles.cancelButton}
                                    onClick={() => setShowProcessModal(false)}
                                >
                                    –û—Ç–º–µ–Ω–∞
                                </button>
                                <button
                                    className={styles.saveButton}
                                    onClick={handleCreateProcess}
                                    disabled={!processForm.type || !processForm.title}
                                >
                                    –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç–∞ */}
            {selectedLoan && (
                <div className={styles.modalOverlay}>
                    <div className={styles.modalContent}>
                        <div className={styles.modalHeader}>
                            <h2 className={styles.modalTitle}>
                                <span className={styles.modalIcon}>üí≥</span>
                                –û–ø–ª–∞—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞
                            </h2>
                            <button
                                className={styles.modalClose}
                                onClick={() => {
                                    setSelectedLoan(null);
                                    setPaymentAmount('');
                                    setSchedule(null);
                                }}
                            >
                                ‚úï
                            </button>
                        </div>

                        <div className={styles.modalBody}>
                            <div className={styles.loanInfo}>
                                <h3 className={styles.loanInfoTitle}>{selectedLoan.purpose}</h3>
                                <div className={styles.loanDetails}>
                                    <div className={styles.detailRow}>
                                        <span>–û—Å—Ç–∞—Ç–æ–∫:</span>
                                        <span>{formatCurrency(selectedLoan.remaining_amount || selectedLoan.amount)}</span>
                                    </div>
                                    <div className={styles.detailRow}>
                                        <span>–°—Ç–∞–≤–∫–∞:</span>
                                        <span>{selectedLoan.interest_rate}%</span>
                                    </div>
                                </div>
                            </div>

                            <div className={styles.formGroup}>
                                <label className={styles.formLabel}>–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞</label>
                                <input
                                    type="number"
                                    value={paymentAmount}
                                    onChange={(e) => setPaymentAmount(e.target.value)}
                                    className={styles.formInput}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                                />
                            </div>

                            {schedule && (
                                <div className={styles.scheduleSection}>
                                    <h4 className={styles.scheduleTitle}>–ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π</h4>
                                    <div className={styles.scheduleList}>
                                        {schedule.map((payment, index) => (
                                            <div key={index} className={styles.scheduleItem}>
                                                <span>{formatDate(payment.due_date)}</span>
                                                <span>{formatCurrency(payment.amount)}</span>
                                                <span className={
                                                    payment.status === 'paid' ? styles.paidStatus :
                                                        payment.status === 'overdue' ? styles.overdueStatus :
                                                            styles.pendingStatus
                                                }>
                                                    {payment.status}
                                                </span>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            <div className={styles.modalFooter}>
                                <button
                                    className={styles.cancelButton}
                                    onClick={() => {
                                        setSelectedLoan(null);
                                        setPaymentAmount('');
                                        setSchedule(null);
                                    }}
                                >
                                    –û—Ç–º–µ–Ω–∞
                                </button>
                                <button
                                    className={styles.saveButton}
                                    onClick={() => handlePayLoan(selectedLoan.id)}
                                    disabled={!paymentAmount || parseFloat(paymentAmount) <= 0}
                                >
                                    –û–ø–ª–∞—Ç–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º */}
            {selectedProcess && (
                <div className={styles.modalOverlay}>
                    <div className={styles.modalContent}>
                        <div className={styles.modalHeader}>
                            <h2 className={styles.modalTitle}>
                                <span className={styles.modalIcon}>üìä</span>
                                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º
                            </h2>
                            <button
                                className={styles.modalClose}
                                onClick={() => setSelectedProcess(null)}
                            >
                                ‚úï
                            </button>
                        </div>

                        <div className={styles.modalBody}>
                            <div className={styles.processInfo}>
                                <h3 className={styles.processInfoTitle}>{selectedProcess.title}</h3>
                                <p className={styles.processInfoDescription}>{selectedProcess.description}</p>

                                <div className={styles.processMeta}>
                                    <div className={styles.metaItem}>
                                        <span>–¢–∏–ø:</span>
                                        <span>{selectedProcess.type}</span>
                                    </div>
                                    <div className={styles.metaItem}>
                                        <span>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</span>
                                        <span>{selectedProcess.priority}</span>
                                    </div>
                                    <div className={styles.metaItem}>
                                        <span>–°—Ç–∞—Ç—É—Å:</span>
                                        <span>{selectedProcess.status}</span>
                                    </div>
                                </div>
                            </div>

                            <div className={styles.formGroup}>
                                <label className={styles.formLabel}>–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å</label>
                                <select
                                    onChange={(e) => handleUpdateProcessStatus(selectedProcess.id, e.target.value)}
                                    className={styles.formSelect}
                                >
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å</option>
                                    <option value="pending">–û–∂–∏–¥–∞–Ω–∏–µ</option>
                                    <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
                                    <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                                    <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω–æ</option>
                                </select>
                            </div>

                            <div className={styles.modalFooter}>
                                <button
                                    className={styles.cancelButton}
                                    onClick={() => setSelectedProcess(null)}
                                >
                                    –ó–∞–∫—Ä—ã—Ç—å
                                </button>
                                <button
                                    className={styles.deleteButton}
                                    onClick={() => handleDeleteProcess(selectedProcess.id)}
                                >
                                    –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Loans;