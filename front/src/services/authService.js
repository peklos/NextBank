// front/src/services/authService.js
import { loginClient, registerClient, getMe } from "../api/clients";
import { fetchMyAccounts } from "../api/accounts";
import { getClientCards } from "../api/cards";
import { getMyLoans } from "../api/loans";
import { getMyProcesses } from "../api/processes";
import { getMyTransactions } from "../api/transactions";
import { setUser } from '../features/auth/authSlice';
import { setPersonalInfo } from '../features/auth/personalInfoSlice';
import { setAccounts } from '../features/accounts/accSlice';
import { setCards } from '../features/cards/cardSlice';
import { setLoans } from '../features/loans/loansSlice';
import { setProcesses } from '../features/processes/processesSlice';
import { setTransactions } from '../features/transactions/transactionsSlice';
import { fullLogout } from "../features/auth/logoutThunk";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const loadUserData = async (dispatch, userId) => {
    try {
        const [accRes, cardsRes, loansRes, processesRes, transactionsRes] = await Promise.all([
            fetchMyAccounts(),
            getClientCards(),
            getMyLoans(),
            getMyProcesses(),
            getMyTransactions()
        ]);

        if (accRes.data) dispatch(setAccounts(accRes.data));
        if (cardsRes.data) dispatch(setCards(cardsRes.data));
        if (loansRes.data) dispatch(setLoans(loansRes.data));
        if (processesRes.data) dispatch(setProcesses(processesRes.data));
        if (transactionsRes.data) dispatch(setTransactions(transactionsRes.data));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –∞–≤—Ç–æ–ª–æ–≥–∏–Ω
    }
};

// === –õ–û–ì–ò–ù ===
export const handleLogin = async (dispatch, email, password) => {
    const res = await loginClient(email, password);
    if (res.data) {
        dispatch(setUser({
            id: res.data.client_id,
            access_token: res.data.access_token,
            first_name: res.data.first_name,
            last_name: res.data.last_name,
            patronymic: res.data.patronymic,
            email: res.data.email,
            created_at: res.data.created_at,
            phone: res.data.phone
        }));

        if (res.data.personal_info) {
            dispatch(setPersonalInfo({
                passport_number: res.data.personal_info.passport_number,
                address: res.data.personal_info.address,
                birth_date: res.data.personal_info.birth_date,
                employment_status: res.data.personal_info.employment_status
            }));
        }

        localStorage.setItem("access_token", res.data.access_token);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é)
        loadUserData(dispatch, res.data.client_id);

        return { success: true };
    }

    return { success: false, error: res.error };
};

// === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ===
export const handleRegister = async (dispatch, formData) => {
    const res = await registerClient(
        formData.firstName,
        formData.lastName,
        formData.patronymic,
        formData.email,
        formData.phone,
        formData.password
    );

    if (res.data) {
        dispatch(setUser({
            id: res.data.client_id,
            access_token: res.data.access_token,
            first_name: res.data.first_name,
            last_name: res.data.last_name,
            patronymic: res.data.patronymic,
            email: res.data.email,
            created_at: res.data.created_at,
            phone: res.data.phone
        }));

        if (res.data.personal_info) {
            dispatch(setPersonalInfo({
                passport_number: res.data.personal_info.passport_number,
                address: res.data.personal_info.address,
                birth_date: res.data.personal_info.birth_date,
                employment_status: res.data.personal_info.employment_status
            }));
        }

        localStorage.setItem("access_token", res.data.access_token);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ
        loadUserData(dispatch, res.data.client_id);

        return { success: true };
    }

    return { success: false, error: res.error };
};

// === –ê–í–¢–û–õ–û–ì–ò–ù ===
export const autoLogin = async (dispatch) => {
    const token = localStorage.getItem("access_token");

    if (!token) {
        console.log("‚ÑπÔ∏è –¢–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return false;
    }

    try {
        console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞...");
        const res = await getMe();

        if (res.data) {
            console.log("‚úÖ –¢–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –≤–∞–ª–∏–¥–Ω—ã–π - –∞–≤—Ç–æ–ª–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω");

            dispatch(setUser({
                access_token: token,
                ...res.data
            }));

            if (res.data.personal_info) {
                dispatch(setPersonalInfo({
                    passport_number: res.data.personal_info.passport_number,
                    address: res.data.personal_info.address,
                    birth_date: res.data.personal_info.birth_date,
                    employment_status: res.data.personal_info.employment_status
                }));
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º UI)
            loadUserData(dispatch, res.data.id).catch(err => {
                console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', err);
            });

            return true; // ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∞–≤—Ç–æ–ª–æ–≥–∏–Ω
        } else {
            console.log("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç /auth/me");
            dispatch(fullLogout());
            return false;
        }
    } catch (error) {
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 - axios interceptor —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –ª–æ–≥–∞—É—Ç
        if (error.response?.status === 401) {
            console.log("‚ö†Ô∏è 401 –ø—Ä–∏ –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–µ - –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–ª");
            return false;
        }

        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –¥–µ–ª–∞–µ–º –ª–æ–≥–∞—É—Ç –≤—Ä—É—á–Ω—É—é
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
        dispatch(fullLogout());
        return false;
    }
};