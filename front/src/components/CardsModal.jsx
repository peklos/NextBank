import React, { useState } from 'react';
import styles from '../styles/accounts.module.css';
import CardItem from './CardItem';

const CardsModal = ({ isOpen, account, cards, user, onClose, onAddCard, onCardOperation }) => {
    const [showCardNumbers, setShowCardNumbers] = useState({});
    const [copiedCardId, setCopiedCardId] = useState(null);

    if (!isOpen || !account) return null;

    // –ù–∞–¥–µ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    const copyCardNumber = async (cardNumber, cardId) => {
        
        try {
            // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            const cleanCardNumber = cardNumber.toString().replace(/\s/g, '');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤–∞–ª–∏–¥–Ω—ã–π
            if (!cleanCardNumber || cleanCardNumber.length < 4) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã');
            }

            // –ü—Ä–æ–±—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Clipboard API
            if (navigator.clipboard && window.isSecureContext) {
                await navigator.clipboard.writeText(cleanCardNumber);
            } else {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏–ª–∏ HTTP
                const textArea = document.createElement('textarea');
                textArea.value = cleanCardNumber;
                textArea.style.position = 'fixed';
                textArea.style.left = '-999999px';
                textArea.style.top = '-999999px';
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select();
                
                const successful = document.execCommand('copy');
                document.body.removeChild(textArea);
                
                if (!successful) {
                    throw new Error('Fallback –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
                }
            }

            // –£—Å–ø–µ—à–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            console.log('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω');
            setCopiedCardId(cardId);
            setTimeout(() => setCopiedCardId(null), 2000);

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', err);
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            try {
                alert(`–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${cardNumber}\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é`);
            } catch (alertErr) {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å alert:', alertErr);
            }
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    const toggleCardVisibility = (cardId) => {
        setShowCardNumbers(prev => ({
            ...prev,
            [cardId]: !prev[cardId]
        }));
    };

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —Ç–µ–∫—É—â–µ–º—É —Å—á–µ—Ç—É
    const accountCards = cards.filter(card => card.account_id === account.id);

    return (
        <div className={styles.modalOverlay}>
            <div className={styles.modalContent}>
                <div className={styles.modalHeader}>
                    <h2 className={styles.modalTitle}>
                        <span className={styles.modalIcon}>üí≥</span>
                        –ö–∞—Ä—Ç—ã —Å—á–µ—Ç–∞ {account.account_number}
                    </h2>
                    <button className={styles.modalClose} onClick={onClose}>
                        <svg viewBox="0 0 24 24" fill="none">
                            <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" />
                        </svg>
                    </button>
                </div>

                <div className={styles.modalBody}>
                    {accountCards.length === 0 ? (
                        <div className={styles.emptyState}>
                            <div className={styles.emptyIcon}>üí≥</div>
                            <h3 className={styles.emptyTitle}>–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç</h3>
                            <p className={styles.emptyDescription}>
                                –í—ã–ø—É—Å—Ç–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
                            </p>
                            <button className={styles.addCardButton} onClick={onAddCard}>
                                <span className={styles.addIcon}>+</span>
                                –í—ã–ø—É—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç—É
                            </button>
                        </div>
                    ) : (
                        <div className={styles.cardsGrid}>
                            {accountCards.map((card) => (
                                <CardItem
                                    key={card.id}
                                    card={card}
                                    user={user}
                                    showCardNumber={showCardNumbers[card.id] || false}
                                    onToggleVisibility={() => toggleCardVisibility(card.id)}
                                    onCopyNumber={() => copyCardNumber(card.card_number, card.id)}
                                    onCardOperation={onCardOperation}
                                    isCopied={copiedCardId === card.id}
                                />
                            ))}
                        </div>
                    )}
                </div>

                <div className={styles.modalFooter}>
                    {accountCards.length > 0 && (
                        <button className={styles.addCardButton} onClick={onAddCard}>
                            <span className={styles.addIcon}>+</span>
                            –í—ã–ø—É—Å—Ç–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É
                        </button>
                    )}
                    <button className={styles.closeButton} onClick={onClose}>
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        </div>
    );
};

export default CardsModal;