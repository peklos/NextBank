// src/components/EditNameModal.jsx
import { updateProfile } from '../api/profile';
import { useDispatch, useSelector } from 'react-redux';
import { setUser } from '../features/auth/authSlice';
import styles from '../styles/profile.module.css';

const EditNameModal = ({
    isOpen,
    onClose,
    userData,
    forms,
    error,
    success,
    onUpdateForm,
    onSetError,
    onSetSuccess
}) => {
    const dispatch = useDispatch();
    const currentUser = useSelector(state => state.auth);

    const validateName = (firstName, lastName, patronymic) => {
        if (!firstName || !lastName || !patronymic) {
            return '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
        }

        const nameRegex = /^[–ê-–Ø–Å–∞-—è—ë\s-]+$/;

        if (!nameRegex.test(firstName)) {
            return '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã';
        }

        if (!nameRegex.test(lastName)) {
            return '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã';
        }

        if (!nameRegex.test(patronymic)) {
            return '–û—Ç—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã';
        }

        if (firstName.length < 2 || firstName.length > 50) {
            return '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤';
        }

        if (lastName.length < 2 || lastName.length > 50) {
            return '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤';
        }

        if (patronymic.length < 2 || patronymic.length > 50) {
            return '–û—Ç—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤';
        }

        return null;
    };

    const handleUpdateName = async () => {
        const validationError = validateName(
            forms.name.firstName,
            forms.name.lastName,
            forms.name.patronymic
        );

        if (validationError) {
            onSetError(validationError);
            return;
        }

        const { data, error } = await updateProfile({
            first_name: forms.name.firstName,
            last_name: forms.name.lastName,
            patronymic: forms.name.patronymic
        });

        if (error || !data) {
            onSetError(error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
            return;
        }

        dispatch(setUser({
            ...currentUser,  // üëà –°–û–•–†–ê–ù–Ø–ï–ú –í–°–ï –°–¢–ê–†–´–ï –î–ê–ù–ù–´–ï (–≤–∫–ª—é—á–∞—è —Ç–æ–∫–µ–Ω!)
            first_name: data.first_name,
            last_name: data.last_name,
            patronymic: data.patronymic
        }));

        onSetSuccess('–§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        onSetError('');
        setTimeout(() => {
            onClose();
            onSetSuccess('');
        }, 2000);
    };

    if (!isOpen) return null;

    return (
        <div className={styles.modalOverlay}>
            <div className={styles.modalContent}>
                <div className={styles.modalHeader}>
                    <h2 className={styles.modalTitle}>
                        <span className={styles.modalIcon}>üë§</span>
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û
                    </h2>
                    <button
                        className={styles.modalClose}
                        onClick={onClose}
                    >
                        X
                    </button>
                </div>

                <div className={styles.modalBody}>
                    <div className={styles.formGrid}>
                        <div className={styles.formGroup}>
                            <label className={styles.formLabel}>–§–∞–º–∏–ª–∏—è</label>
                            <input
                                type="text"
                                value={forms.name.lastName}
                                onChange={(e) => onUpdateForm('name', 'lastName', e.target.value)}
                                className={styles.formInput}
                                placeholder="–ò–≤–∞–Ω–æ–≤"
                            />
                        </div>

                        <div className={styles.formGroup}>
                            <label className={styles.formLabel}>–ò–º—è</label>
                            <input
                                type="text"
                                value={forms.name.firstName}
                                onChange={(e) => onUpdateForm('name', 'firstName', e.target.value)}
                                className={styles.formInput}
                                placeholder="–ò–≤–∞–Ω"
                            />
                        </div>

                        <div className={styles.formGroup}>
                            <label className={styles.formLabel}>–û—Ç—á–µ—Å—Ç–≤–æ</label>
                            <input
                                type="text"
                                value={forms.name.patronymic}
                                onChange={(e) => onUpdateForm('name', 'patronymic', e.target.value)}
                                className={styles.formInput}
                                placeholder="–ò–≤–∞–Ω–æ–≤–∏—á"
                            />
                        </div>
                    </div>

                    {error && (
                        <div className={styles.errorContainer}>
                            <p className={styles.errorMessage}>{error}</p>
                        </div>
                    )}

                    {success && (
                        <div className={styles.successContainer}>
                            <p className={styles.successMessage}>{success}</p>
                        </div>
                    )}

                    <div className={styles.modalFooter}>
                        <button
                            className={styles.cancelButton}
                            onClick={onClose}
                        >
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button className={styles.saveButton} onClick={handleUpdateName}>
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default EditNameModal;