from dotenv import load_dotenv
import os
from passlib.context import CryptContext
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi import APIRouter, Depends, HTTPException
from datetime import datetime, timedelta, timezone
from jose import jwt
from schemas.employee import EmployeeCreateSchema, EmployeeLoginSchema
from sqlalchemy.orm import Session, joinedload
from db import models, database

load_dotenv()

SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError('SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω')

ALGORITHM = 'HS256'
pwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')

security = HTTPBearer()


def hash_password(password: str):
    return pwd_context.hash(password)


router = APIRouter(
    prefix='/admin/auth',
    tags=['–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤']
)


def verify_password(plain_pass, hashed_pass):
    return pwd_context.verify(plain_pass, hashed_pass)


def create_access_token(data: dict, expires_minutes: int = 480):
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + timedelta(minutes=expires_minutes)
    to_encode.update({'exp': expire, 'type': 'employee'})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)


def get_current_employee(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Session = Depends(database.get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    token = credentials.credentials
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        employee_id: str = payload.get('sub')
        token_type: str = payload.get('type')

        if employee_id is None or token_type != 'employee':
            raise HTTPException(status_code=401, detail='–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω')
    except Exception:
        raise HTTPException(status_code=401, detail='–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω')

    employee = (
        db.query(models.Employee)
        .options(
            joinedload(models.Employee.role),
            joinedload(models.Employee.branch)
        )
        .filter(models.Employee.id == employee_id)
        .first()
    )

    if employee is None:
        raise HTTPException(status_code=401, detail='–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')

    if not employee.is_active:
        raise HTTPException(
            status_code=403, detail='–ê–∫–∫–∞—É–Ω—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')

    return employee


def check_permission(employee: models.Employee, allowed_roles: list[str]):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    if employee.role.name not in allowed_roles:
        raise HTTPException(
            status_code=403,
            detail=f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: {", ".join(allowed_roles)}'
        )


# üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - SuperAdmin
def check_superadmin(employee: models.Employee):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è SuperAdmin"""
    if employee.role.name != "SuperAdmin":
        raise HTTPException(
            status_code=403,
            detail='–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ SuperAdmin.'
        )


@router.get('/me', summary='–ê–≤—Ç–æ–ª–æ–≥–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ç–æ–∫–µ–Ω)')
def read_employee_me(current_employee: models.Employee = Depends(get_current_employee)):
    return {
        'id': current_employee.id,
        'first_name': current_employee.first_name,
        'last_name': current_employee.last_name,
        'patronymic': current_employee.patronymic,
        'email': current_employee.email,
        'is_active': current_employee.is_active,
        'created_at': current_employee.created_at,
        'role': {
            'id': current_employee.role.id,
            'name': current_employee.role.name
        } if current_employee.role else None,
        'branch': {
            'id': current_employee.branch.id,
            'name': current_employee.branch.name,
            'address': current_employee.branch.address
        } if current_employee.branch else None
    }


@router.post('/login', summary='–õ–æ–≥–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
def login(data: EmployeeLoginSchema, db: Session = Depends(database.get_db)):
    employee = (db.query(models.Employee)
                .options(
                    joinedload(models.Employee.role),
                    joinedload(models.Employee.branch)
    )
        .filter(models.Employee.email == data.email)
        .first()
    )

    if not employee or not verify_password(data.password, employee.hashed_password):
        raise HTTPException(
            status_code=401, detail='–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
        )

    if not employee.is_active:
        raise HTTPException(
            status_code=403, detail='–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
        )

    token = create_access_token({'sub': str(employee.id)})

    return {
        'access_token': token,
        'employee_id': employee.id,
        'first_name': employee.first_name,
        'last_name': employee.last_name,
        'patronymic': employee.patronymic,
        'email': employee.email,
        'is_active': employee.is_active,
        'created_at': employee.created_at,
        'role': {
            'id': employee.role.id,
            'name': employee.role.name
        } if employee.role else None,
        'branch': {
            'id': employee.branch.id,
            'name': employee.branch.name,
            'address': employee.branch.address
        } if employee.branch else None,
        'token_type': 'bearer'
    }


@router.post('/register', summary='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ SuperAdmin)')
def create_employee(
    data: EmployeeCreateSchema,
    db: Session = Depends(database.get_db),
    current_employee: models.Employee = Depends(get_current_employee)
):
    """
    üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è SuperAdmin)

    ‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ SuperAdmin!
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ SuperAdmin
    check_superadmin(current_employee)

    # üÜï –ó–∞–ø—Ä–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ SuperAdmin
    superadmin_role = db.query(models.Role).filter(
        models.Role.name == "SuperAdmin"
    ).first()

    if superadmin_role and data.role_id == superadmin_role.id:
        raise HTTPException(
            status_code=403,
            detail='–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–≥–æ SuperAdmin! –í —Å–∏—Å—Ç–µ–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω SuperAdmin.'
        )

    if db.query(models.Employee).filter(models.Employee.email == data.email).first():
        raise HTTPException(
            status_code=400, detail='Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏
    role = db.query(models.Role).filter(models.Role.id == data.role_id).first()
    if not role:
        raise HTTPException(status_code=404, detail='–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–µ–Ω–∏—è
    branch = db.query(models.Branch).filter(
        models.Branch.id == data.branch_id).first()
    if not branch:
        raise HTTPException(status_code=404, detail='–û—Ç–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

    db_employee = models.Employee(
        first_name=data.first_name,
        last_name=data.last_name,
        patronymic=data.patronymic,
        email=data.email,
        hashed_password=hash_password(data.password),
        role_id=data.role_id,
        branch_id=data.branch_id,
        is_active=True
    )

    db.add(db_employee)
    db.commit()
    db.refresh(db_employee)

    return {
        'employee_id': db_employee.id,
        'first_name': db_employee.first_name,
        'last_name': db_employee.last_name,
        'patronymic': db_employee.patronymic,
        'email': db_employee.email,
        'role_id': db_employee.role_id,
        'branch_id': db_employee.branch_id,
        'created_at': db_employee.created_at,
        'message': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
    }
