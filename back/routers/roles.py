from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from db.database import get_db
from db import models
from schemas.role import RoleCreate, RoleResponse, RoleUpdate
from routers.employee_auth import get_current_employee, check_superadmin

router = APIRouter(
    prefix="/roles",
    tags=["–†–æ–ª–∏"]
)


@router.get("/", response_model=list[RoleResponse], summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏")
def get_all_roles(
    db: Session = Depends(get_db),
    current_employee: models.Employee = Depends(get_current_employee)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è SuperAdmin)"""
    check_superadmin(current_employee)

    roles = db.query(models.Role).all()
    return roles


@router.get("/{role_id}", response_model=RoleResponse, summary="–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ ID")
def get_role_by_id(
    role_id: int,
    db: Session = Depends(get_db),
    current_employee: models.Employee = Depends(get_current_employee)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏"""
    check_superadmin(current_employee)

    role = db.query(models.Role).filter(models.Role.id == role_id).first()
    if not role:
        raise HTTPException(status_code=404, detail="–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    return role


@router.post("/", response_model=RoleResponse, summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å")
def create_role(
    role_data: RoleCreate,
    db: Session = Depends(get_db),
    current_employee: models.Employee = Depends(get_current_employee)
):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å (—Ç–æ–ª—å–∫–æ SuperAdmin)

    ‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å SuperAdmin!
    """
    check_superadmin(current_employee)

    # üÜï –ó–∞–ø—Ä–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ SuperAdmin
    if role_data.name == "SuperAdmin":
        raise HTTPException(
            status_code=403,
            detail="–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å SuperAdmin! –≠—Ç–∞ —Ä–æ–ª—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π."
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    existing_role = db.query(models.Role).filter(
        models.Role.name == role_data.name
    ).first()

    if existing_role:
        raise HTTPException(
            status_code=400, detail="–†–æ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    new_role = models.Role(name=role_data.name)
    db.add(new_role)
    db.commit()
    db.refresh(new_role)

    return new_role


@router.patch("/{role_id}", response_model=RoleResponse, summary="–û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å")
def update_role(
    role_id: int,
    role_data: RoleUpdate,
    db: Session = Depends(get_db),
    current_employee: models.Employee = Depends(get_current_employee)
):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏

    ‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ SuperAdmin!
    """
    check_superadmin(current_employee)

    role = db.query(models.Role).filter(models.Role.id == role_id).first()
    if not role:
        raise HTTPException(status_code=404, detail="–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # üÜï –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ SuperAdmin
    if role.name == "SuperAdmin":
        raise HTTPException(
            status_code=403,
            detail="–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å SuperAdmin!"
        )

    # üÜï –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ SuperAdmin
    if role_data.name == "SuperAdmin":
        raise HTTPException(
            status_code=403,
            detail="–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ä–æ–ª—å –≤ SuperAdmin!"
        )

    if role_data.name:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
        existing = db.query(models.Role).filter(
            models.Role.name == role_data.name,
            models.Role.id != role_id
        ).first()
        if existing:
            raise HTTPException(
                status_code=400, detail="–†–æ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        role.name = role_data.name

    db.commit()
    db.refresh(role)
    return role


@router.delete("/{role_id}", summary="–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å")
def delete_role(
    role_id: int,
    db: Session = Depends(get_db),
    current_employee: models.Employee = Depends(get_current_employee)
):
    """
    –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å (—Ç–æ–ª—å–∫–æ SuperAdmin)

    ‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å SuperAdmin!
    """
    check_superadmin(current_employee)

    role = db.query(models.Role).filter(models.Role.id == role_id).first()
    if not role:
        raise HTTPException(status_code=404, detail="–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # üÜï –ó–∞–ø—Ä–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ SuperAdmin
    if role.name == "SuperAdmin":
        raise HTTPException(
            status_code=403,
            detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å SuperAdmin!"
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é
    employees_count = db.query(models.Employee).filter(
        models.Employee.role_id == role_id
    ).count()

    if employees_count > 0:
        raise HTTPException(
            status_code=400,
            detail=f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å. –ï—Å—Ç—å {employees_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫(–æ–≤) —Å —ç—Ç–æ–π —Ä–æ–ª—å—é"
        )

    db.delete(role)
    db.commit()

    return {"message": "–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", "deleted_role_id": role_id}
