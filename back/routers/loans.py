from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
from db.database import get_db
from db import models
from schemas.loan import (
    LoanApplicationSchema,
    LoanResponse,
    LoanPaymentSchema,
    LoanScheduleResponse,
    LoanScheduleItem
)
from routers.auth import get_current_user

router = APIRouter(
    prefix="/loans",
    tags=["–ö—Ä–µ–¥–∏—Ç—ã"]
)


# ==============================
# üÜï –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç
# ==============================
@router.post("/apply", response_model=LoanResponse, summary="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç")
def apply_for_loan(
    loan_data: LoanApplicationSchema,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—Ä–µ–¥–∏—Ç.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if not current_client.personal_info:
        raise HTTPException(
            status_code=400,
            detail="–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—Ä–µ–¥–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        )

    # –°–æ–∑–¥–∞–µ–º –∫—Ä–µ–¥–∏—Ç
    new_loan = models.Loan(
        amount=loan_data.amount,
        interest_rate=loan_data.interest_rate,
        term_months=loan_data.term_months,
        is_paid=False,
        client_id=current_client.id
    )
    db.add(new_loan)
    db.flush()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
    process = models.Process(
        process_type="loan_application",
        status="in_progress",
        client_id=current_client.id,
        employee_id=None,
        branch_id=None
    )
    db.add(process)
    db.commit()
    db.refresh(new_loan)

    return new_loan


# ==============================
# üìú –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫—Ä–µ–¥–∏—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
# ==============================
@router.get("/me", response_model=list[LoanResponse], summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã")
def get_my_loans(
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    """
    loans = db.query(models.Loan).filter(
        models.Loan.client_id == current_client.id
    ).all()
    return loans


# ==============================
# üîç –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
# ==============================
@router.get("/{loan_id}", response_model=LoanResponse, summary="–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫—Ä–µ–¥–∏—Ç–∞")
def get_loan_details(
    loan_id: int,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫—Ä–µ–¥–∏—Ç–µ.
    """
    loan = db.query(models.Loan).filter(
        models.Loan.id == loan_id,
        models.Loan.client_id == current_client.id
    ).first()

    if not loan:
        raise HTTPException(status_code=404, detail="–ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return loan


# ==============================
# üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç 
# ==============================
@router.post("/{loan_id}/pay", summary="–û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç")
def pay_loan(
    loan_id: int,
    payment_data: LoanPaymentSchema,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –û–ø–ª–∞—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã.
    –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç
    loan = db.query(models.Loan).filter(
        models.Loan.id == loan_id,
        models.Loan.client_id == current_client.id
    ).first()

    if not loan:
        raise HTTPException(status_code=404, detail="–ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if loan.is_paid:
        raise HTTPException(
            status_code=400, detail="–ö—Ä–µ–¥–∏—Ç —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—á–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—É
    card = db.query(models.Card).filter(
        models.Card.id == payment_data.card_id,
        models.Card.client_id == current_client.id,
        models.Card.is_active == True
    ).first()

    if not card:
        raise HTTPException(
            status_code=404, detail="–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ (—Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏)
    total_amount = loan.amount * (1 + loan.interest_rate / 100)

    # üÜï –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É
    remaining_amount = total_amount - loan.paid_amount

    if payment_data.payment_amount > remaining_amount:
        raise HTTPException(
            status_code=400,
            detail=f"–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É ({remaining_amount:.2f} ‚ÇΩ)"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã
    if card.account.balance < payment_data.payment_amount:
        raise HTTPException(
            status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ")

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    card.account.balance -= payment_data.payment_amount

    # üÜï –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É
    loan.paid_amount += payment_data.payment_amount

    # üÜï –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    new_remaining = total_amount - loan.paid_amount

    # –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—É–º–º–∞ - –ø–æ–º–µ—á–∞–µ–º –∫—Ä–µ–¥–∏—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º
    if new_remaining <= 0.01:  # –Ω–µ–±–æ–ª—å—à–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è float
        loan.is_paid = True
        new_remaining = 0
        message = f"–ö—Ä–µ–¥–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—á–µ–Ω! –°–ø–∏—Å–∞–Ω–æ {payment_data.payment_amount:.2f} ‚ÇΩ"
    else:
        message = f"–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞. –°–ø–∏—Å–∞–Ω–æ {payment_data.payment_amount:.2f} ‚ÇΩ"

    db.commit()

    return {
        "message": message,
        "paid_amount": payment_data.payment_amount,
        "total_paid": loan.paid_amount,
        "remaining_amount": new_remaining,
        "card_balance": card.account.balance
    }


# ==============================
# üìä –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫—Ä–µ–¥–∏—Ç—É
# ==============================
@router.get("/{loan_id}/schedule", response_model=LoanScheduleResponse, summary="–ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π")
def get_loan_schedule(
    loan_id: int,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫—Ä–µ–¥–∏—Ç—É (–∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥).
    """
    loan = db.query(models.Loan).filter(
        models.Loan.id == loan_id,
        models.Loan.client_id == current_client.id
    ).first()

    if not loan:
        raise HTTPException(status_code=404, detail="–ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –†–∞—Å—á–µ—Ç –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    P = loan.amount  # –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
    r = loan.interest_rate / 100 / 12  # –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞
    n = loan.term_months  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤

    # –§–æ—Ä–º—É–ª–∞ –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    if r > 0:
        monthly_payment = P * (r * (1 + r)**n) / ((1 + r)**n - 1)
    else:
        monthly_payment = P / n

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    schedule = []
    remaining_balance = P
    current_date = loan.issued_at

    for month in range(1, n + 1):
        interest_payment = remaining_balance * r
        principal_payment = monthly_payment - interest_payment
        remaining_balance -= principal_payment

        payment_date = current_date + timedelta(days=30 * month)

        schedule.append(LoanScheduleItem(
            month=month,
            payment_date=payment_date,
            monthly_payment=round(monthly_payment, 2),
            principal_payment=round(principal_payment, 2),
            interest_payment=round(interest_payment, 2),
            remaining_balance=round(max(0, remaining_balance), 2)
        ))

    total_interest = monthly_payment * n - P

    return LoanScheduleResponse(
        loan_id=loan.id,
        total_amount=round(P, 2),
        monthly_payment=round(monthly_payment, 2),
        total_interest=round(total_interest, 2),
        schedule=schedule
    )
