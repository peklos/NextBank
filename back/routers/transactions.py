from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from sqlalchemy import desc, or_
from db.database import get_db
from db import models
from schemas.transaction import TransactionResponse, TransactionStatsResponse
from routers.auth import get_current_user
from typing import Optional

router = APIRouter(
    prefix="/transactions",
    tags=["–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"]
)


# ==============================
# üìú –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
# ==============================
@router.get("/me", response_model=list[TransactionResponse], summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
def get_my_transactions(
    limit: Optional[int] = Query(50, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"),
    offset: Optional[int] = Query(0, description="–°–º–µ—â–µ–Ω–∏–µ"),
    transaction_type: Optional[str] = Query(
        None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É: deposit, withdraw, transfer, loan_payment"),
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–∏–ø—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é.
    """
    query = db.query(models.Transaction).filter(
        models.Transaction.client_id == current_client.id
    )

    if transaction_type:
        query = query.filter(
            models.Transaction.transaction_type == transaction_type)

    transactions = query.order_by(desc(models.Transaction.created_at)).limit(
        limit).offset(offset).all()

    return transactions


# ==============================
# üîç –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
# ==============================
@router.get("/{transaction_id}", response_model=TransactionResponse, summary="–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
def get_transaction_details(
    transaction_id: int,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    """
    transaction = db.query(models.Transaction).filter(
        models.Transaction.id == transaction_id,
        models.Transaction.client_id == current_client.id
    ).first()

    if not transaction:
        raise HTTPException(status_code=404, detail="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    return transaction


# ==============================
# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
# ==============================
@router.get("/me/stats", response_model=TransactionStatsResponse, summary="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º")
def get_my_transactions_stats(
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –∫–ª–∏–µ–Ω—Ç–∞.
    """
    transactions = db.query(models.Transaction).filter(
        models.Transaction.client_id == current_client.id,
        models.Transaction.status == "completed"
    ).all()

    stats = {
        "total_transactions": len(transactions),
        "total_deposits": sum(t.amount for t in transactions if t.transaction_type == "deposit"),
        "total_withdrawals": sum(t.amount for t in transactions if t.transaction_type == "withdraw"),
        "total_transfers": sum(t.amount for t in transactions if t.transaction_type == "transfer"),
        "total_loan_payments": sum(t.amount for t in transactions if t.transaction_type == "loan_payment")
    }

    return stats


# ==============================
# üîé –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
# ==============================
@router.get("/search/", response_model=list[TransactionResponse], summary="–ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
def search_transactions(
    query: str = Query(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ)"),
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Å—É–º–º–µ.
    """
    transactions = db.query(models.Transaction).filter(
        models.Transaction.client_id == current_client.id,
        or_(
            models.Transaction.description.ilike(f"%{query}%"),
            models.Transaction.amount.cast(models.String).ilike(f"%{query}%")
        )
    ).order_by(desc(models.Transaction.created_at)).all()

    return transactions
