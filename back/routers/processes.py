from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from db.database import get_db
from db import models
from schemas.process import (
    ProcessCreateSchema,
    ProcessResponse,
    ProcessUpdateStatusSchema
)
from routers.auth import get_current_user

router = APIRouter(
    prefix="/processes",
    tags=["–ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"]
)


# ==============================
# üÜï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
# ==============================
@router.post("/", response_model=ProcessResponse, summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å")
def create_process(
    process_data: ProcessCreateSchema,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.
    –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: loan_application, card_issue, account_opening
    """
    allowed_types = ["loan_application", "card_issue", "account_opening"]

    if process_data.process_type not in allowed_types:
        raise HTTPException(
            status_code=400,
            detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞. –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(allowed_types)}"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    if process_data.branch_id:
        branch = db.query(models.Branch).filter(
            models.Branch.id == process_data.branch_id
        ).first()
        if not branch:
            raise HTTPException(status_code=404, detail="–û—Ç–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    new_process = models.Process(
        process_type=process_data.process_type,
        status="in_progress",
        client_id=current_client.id,
        employee_id=None,
        branch_id=process_data.branch_id
    )

    db.add(new_process)
    db.commit()
    db.refresh(new_process)

    return new_process


# ==============================
# üìú –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∫–ª–∏–µ–Ω—Ç–∞
# ==============================
@router.get("/me", response_model=list[ProcessResponse], summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–æ–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã")
def get_my_processes(
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    """
    processes = db.query(models.Process).filter(
        models.Process.client_id == current_client.id
    ).order_by(models.Process.created_at.desc()).all()

    return processes


# ==============================
# üîç –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
# ==============================
@router.get("/{process_id}", response_model=ProcessResponse, summary="–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞")
def get_process_details(
    process_id: int,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.
    """
    process = db.query(models.Process).filter(
        models.Process.id == process_id,
        models.Process.client_id == current_client.id
    ).first()

    if not process:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return process


# ==============================
# ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞ (–¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
# ==============================
@router.patch("/{process_id}/status", response_model=ProcessResponse, summary="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞")
def update_process_status(
    process_id: int,
    status_data: ProcessUpdateStatusSchema,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: in_progress, approved, rejected, completed

    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í –±—É–¥—É—â–µ–º —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.
    –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    allowed_statuses = ["in_progress", "approved", "rejected", "completed"]

    if status_data.status not in allowed_statuses:
        raise HTTPException(
            status_code=400,
            detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(allowed_statuses)}"
        )

    process = db.query(models.Process).filter(
        models.Process.id == process_id,
        models.Process.client_id == current_client.id
    ).first()

    if not process:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    process.status = status_data.status
    db.commit()
    db.refresh(process)

    return process


# ==============================
# üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
# ==============================
@router.delete("/{process_id}", summary="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å")
def delete_process(
    process_id: int,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã.
    """
    process = db.query(models.Process).filter(
        models.Process.id == process_id,
        models.Process.client_id == current_client.id
    ).first()

    if not process:
        raise HTTPException(status_code=404, detail="–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    db.delete(process)
    db.commit()

    return {"message": "–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", "deleted_process_id": process_id}


# ==============================
# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º
# ==============================
@router.get("/me/stats", summary="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–∏–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º")
def get_my_processes_stats(
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º –∫–ª–∏–µ–Ω—Ç–∞:
    - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    - –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
    - –ü–æ —Ç–∏–ø–∞–º
    """
    processes = db.query(models.Process).filter(
        models.Process.client_id == current_client.id
    ).all()

    # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_count = {}
    type_count = {}

    for process in processes:
        status_count[process.status] = status_count.get(process.status, 0) + 1
        type_count[process.process_type] = type_count.get(
            process.process_type, 0) + 1

    return {
        "total_processes": len(processes),
        "by_status": status_count,
        "by_type": type_count
    }
