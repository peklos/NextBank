from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session, joinedload
from db.database import get_db
from db import models
from schemas.employee import EmployeeResponse, EmployeeUpdateSchema
from routers.employee_auth import get_current_employee, check_superadmin, hash_password

router = APIRouter(
    prefix="/employees",
    tags=["–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"]
)


@router.get("/", response_model=list[EmployeeResponse], summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
def get_all_employees(
    db: Session = Depends(get_db),
    current_employee: models.Employee = Depends(get_current_employee)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ SuperAdmin)"""
    check_superadmin(current_employee)

    employees = (
        db.query(models.Employee)
        .options(
            joinedload(models.Employee.role),
            joinedload(models.Employee.branch)
        )
        .all()
    )
    return employees


@router.get("/{employee_id}", response_model=EmployeeResponse, summary="–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID")
def get_employee_by_id(
    employee_id: int,
    db: Session = Depends(get_db),
    current_employee: models.Employee = Depends(get_current_employee)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ (—Ç–æ–ª—å–∫–æ SuperAdmin)"""
    check_superadmin(current_employee)

    employee = (
        db.query(models.Employee)
        .options(
            joinedload(models.Employee.role),
            joinedload(models.Employee.branch)
        )
        .filter(models.Employee.id == employee_id)
        .first()
    )

    if not employee:
        raise HTTPException(status_code=404, detail="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return employee


@router.patch("/{employee_id}", response_model=EmployeeResponse, summary="–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
def update_employee(
    employee_id: int,
    employee_data: EmployeeUpdateSchema,
    db: Session = Depends(get_db),
    current_employee: models.Employee = Depends(get_current_employee)
):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ (—Ç–æ–ª—å–∫–æ SuperAdmin)

    ‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –Ω–∞ SuperAdmin!
    """
    check_superadmin(current_employee)

    employee = db.query(models.Employee).filter(
        models.Employee.id == employee_id
    ).first()

    if not employee:
        raise HTTPException(status_code=404, detail="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # üÜï –ó–∞—â–∏—Ç–∞ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –Ω–∞ SuperAdmin
    if employee_data.role_id is not None:
        superadmin_role = db.query(models.Role).filter(
            models.Role.name == "SuperAdmin"
        ).first()

        if superadmin_role and employee_data.role_id == superadmin_role.id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ SuperAdmin
            if employee.role_id != superadmin_role.id:
                raise HTTPException(
                    status_code=403,
                    detail="–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å SuperAdmin! –í —Å–∏—Å—Ç–µ–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω SuperAdmin."
                )

        role = db.query(models.Role).filter(
            models.Role.id == employee_data.role_id).first()
        if not role:
            raise HTTPException(status_code=404, detail="–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        employee.role_id = employee_data.role_id

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
    if employee_data.first_name is not None:
        employee.first_name = employee_data.first_name
    if employee_data.last_name is not None:
        employee.last_name = employee_data.last_name
    if employee_data.patronymic is not None:
        employee.patronymic = employee_data.patronymic
    if employee_data.email is not None:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
        existing = db.query(models.Employee).filter(
            models.Employee.email == employee_data.email,
            models.Employee.id != employee_id
        ).first()
        if existing:
            raise HTTPException(
                status_code=400, detail="Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        employee.email = employee_data.email

    if employee_data.branch_id is not None:
        branch = db.query(models.Branch).filter(
            models.Branch.id == employee_data.branch_id).first()
        if not branch:
            raise HTTPException(status_code=404, detail="–û—Ç–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        employee.branch_id = employee_data.branch_id

    if employee_data.is_active is not None:
        employee.is_active = employee_data.is_active

    db.commit()
    db.refresh(employee)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏
    employee = (
        db.query(models.Employee)
        .options(
            joinedload(models.Employee.role),
            joinedload(models.Employee.branch)
        )
        .filter(models.Employee.id == employee_id)
        .first()
    )

    return employee


@router.delete("/{employee_id}", summary="–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
def delete_employee(
    employee_id: int,
    db: Session = Depends(get_db),
    current_employee: models.Employee = Depends(get_current_employee)
):
    """
    –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ SuperAdmin)

    ‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å SuperAdmin!
    """
    check_superadmin(current_employee)

    if employee_id == current_employee.id:
        raise HTTPException(
            status_code=400,
            detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
        )

    employee = db.query(models.Employee).filter(
        models.Employee.id == employee_id
    ).first()

    if not employee:
        raise HTTPException(status_code=404, detail="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # üÜï –ó–∞–ø—Ä–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ SuperAdmin
    if employee.role.name == "SuperAdmin":
        raise HTTPException(
            status_code=403,
            detail="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å SuperAdmin! –≠—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã."
        )

    db.delete(employee)
    db.commit()

    return {"message": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω", "deleted_employee_id": employee_id}


@router.patch("/{employee_id}/toggle-active", summary="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
def toggle_employee_active(
    employee_id: int,
    db: Session = Depends(get_db),
    current_employee: models.Employee = Depends(get_current_employee)
):
    """
    –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ SuperAdmin)

    ‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–µ–ª—å–∑—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å SuperAdmin!
    """
    check_superadmin(current_employee)

    if employee_id == current_employee.id:
        raise HTTPException(
            status_code=400,
            detail="–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
        )

    employee = db.query(models.Employee).filter(
        models.Employee.id == employee_id
    ).first()

    if not employee:
        raise HTTPException(status_code=404, detail="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # üÜï –ó–∞–ø—Ä–µ—Ç –Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é SuperAdmin
    if employee.role.name == "SuperAdmin":
        raise HTTPException(
            status_code=403,
            detail="–ù–µ–ª—å–∑—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å SuperAdmin!"
        )

    employee.is_active = not employee.is_active
    db.commit()

    status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if employee.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    return {
        "message": f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ {status}",
        "employee_id": employee_id,
        "is_active": employee.is_active
    }


@router.get("/stats/overview", summary="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º")
def get_employees_stats(
    db: Session = Depends(get_db),
    current_employee: models.Employee = Depends(get_current_employee)
):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º (—Ç–æ–ª—å–∫–æ SuperAdmin)"""
    check_superadmin(current_employee)

    total_employees = db.query(models.Employee).count()
    active_employees = db.query(models.Employee).filter(
        models.Employee.is_active == True
    ).count()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º
    roles_stats = db.query(
        models.Role.name,
        models.func.count(models.Employee.id)
    ).join(models.Employee).group_by(models.Role.name).all()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º
    branches_stats = db.query(
        models.Branch.name,
        models.func.count(models.Employee.id)
    ).join(models.Employee).group_by(models.Branch.name).all()

    return {
        "total_employees": total_employees,
        "active_employees": active_employees,
        "inactive_employees": total_employees - active_employees,
        "by_role": {role: count for role, count in roles_stats},
        "by_branch": {branch: count for branch, count in branches_stats}
    }
