from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import random

from db.database import get_db
from schemas import card as card_schemas
from db import models
from routers.auth import get_current_user

router = APIRouter(
    prefix="/cards",
    tags=["–ö–∞—Ä—Ç—ã"]
)

# ==============================
# üî¢ –£—Ç–∏–ª–∏—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
# ==============================


def generate_card_number():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ 16-–∑–Ω–∞—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã"""
    return ''.join(str(random.randint(0, 9)) for _ in range(16))


def generate_cvv():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ CVV (3 —Ü–∏—Ñ—Ä—ã)"""
    return ''.join(str(random.randint(0, 9)) for _ in range(3))


def generate_expiration_date():
    """–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã ‚Äî 4 –≥–æ–¥–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –≤—ã–ø—É—Å–∫–∞"""
    return datetime.utcnow() + timedelta(days=365 * 4)

# ==============================
# üÜï –í—ã–ø—É—Å–∫ –∫–∞—Ä—Ç—ã
# ==============================


@router.post("/", response_model=card_schemas.CardResponse, summary="–í—ã–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É")
def create_card(
    card_data: card_schemas.CardCreate,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã
    allowed_types = ["DEBIT", "CREDIT"]
    if card_data.card_type.upper() not in allowed_types:
        raise HTTPException(
            status_code=400,
            detail=f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–∞—Ä—Ç—ã. –†–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ: {', '.join(allowed_types)}"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á—ë—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
    account = db.query(models.Account).filter(
        models.Account.id == card_data.account_id,
        models.Account.client_id == current_client.id
    ).first()

    if not account:
        raise HTTPException(status_code=404, detail="–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É
    new_card = models.Card(
        card_number=generate_card_number(),
        card_type=card_data.card_type.upper(),
        expiration_date=generate_expiration_date(),
        cvv=generate_cvv(),
        is_active=True,
        client_id=current_client.id,
        account_id=card_data.account_id
    )

    db.add(new_card)
    db.commit()
    db.refresh(new_card)
    return new_card


# ==============================
# üìú –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞
# ==============================


@router.get("/me", response_model=list[card_schemas.CardResponse], summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–æ–∏ –∫–∞—Ä—Ç—ã")
def get_my_cards(
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    cards = db.query(models.Card).filter(
        models.Card.client_id == current_client.id
    ).all()
    return cards

# ==============================
# üö´ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
# ==============================


@router.patch("/{card_id}/deactivate", response_model=card_schemas.CardResponse, summary="–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É")
def deactivate_card(
    card_id: int,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    card = db.query(models.Card).filter(
        models.Card.id == card_id,
        models.Card.client_id == current_client.id
    ).first()

    if not card:
        raise HTTPException(status_code=404, detail="–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if not card.is_active:
        raise HTTPException(status_code=400, detail="–ö–∞—Ä—Ç–∞ —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

    card.is_active = False
    db.commit()
    db.refresh(card)
    return card

# ==============================
# üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
# ==============================


@router.delete("/{card_id}", response_model=card_schemas.CardDeleteResponse, summary="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É")
def delete_card(
    card_id: int,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    card = db.query(models.Card).filter(
        models.Card.id == card_id,
        models.Card.client_id == current_client.id
    ).first()

    if not card:
        raise HTTPException(status_code=404, detail="–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    db.delete(card)
    db.commit()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ ID –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return {"success": True, "deleted_card_id": card_id}


# ==============================
# üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
# ==============================

@router.post("/{card_id}/deposit", summary="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç—É")
def deposit_to_card(
    card_id: int,
    amount: float,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    if amount <= 0:
        raise HTTPException(
            status_code=400, detail="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

    card = db.query(models.Card).filter(
        models.Card.id == card_id,
        models.Card.client_id == current_client.id,
        models.Card.is_active == True
    ).first()

    if not card:
        raise HTTPException(
            status_code=404, detail="–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")

    card.account.balance += amount
    db.commit()
    return {"message": f"–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} ‚ÇΩ", "new_balance": card.account.balance}

# ==============================
# üí∏ –°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ —Å –∫–∞—Ä—Ç—ã
# ==============================


@router.post("/{card_id}/withdraw", summary="–°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å –∫–∞—Ä—Ç—ã")
def withdraw_from_card(
    card_id: int,
    amount: float,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    if amount <= 0:
        raise HTTPException(
            status_code=400, detail="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

    card = db.query(models.Card).filter(
        models.Card.id == card_id,
        models.Card.client_id == current_client.id,
        models.Card.is_active == True
    ).first()

    if not card:
        raise HTTPException(
            status_code=404, detail="–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")

    if card.account.balance < amount:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

    card.account.balance -= amount
    db.commit()
    return {"message": f"–° –∫–∞—Ä—Ç—ã —Å–ø–∏—Å–∞–Ω–æ {amount} ‚ÇΩ", "new_balance": card.account.balance}

# ==============================
# üîÅ –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
# ==============================


@router.post("/transfer", summary="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–∞ –¥—Ä—É–≥—É—é")
def transfer_between_cards(
    from_card_id: int,
    to_card_number: str,
    amount: float,
    db: Session = Depends(get_db),
    current_client=Depends(get_current_user)
):
    if amount <= 0:
        raise HTTPException(
            status_code=400, detail="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

    from_card = db.query(models.Card).filter(
        models.Card.id == from_card_id,
        models.Card.client_id == current_client.id,
        models.Card.is_active == True
    ).first()

    if not from_card:
        raise HTTPException(
            status_code=404, detail="–ö–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")

    to_card = db.query(models.Card).filter(
        models.Card.card_number == to_card_number,
        models.Card.is_active == True
    ).first()

    if not to_card:
        raise HTTPException(
            status_code=404, detail="–ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")

    if from_card.account.balance < amount:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

    from_card.account.balance -= amount
    to_card.account.balance += amount
    db.commit()

    return {"message": f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É {to_card_number}"}
